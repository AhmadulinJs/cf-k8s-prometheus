#@ load("@ytt:data", "data")
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus-pushgateway
  namespace: #@ data.values.system_namespace
spec:
  podSelector:
    matchLabels:
      app: prometheus-pushgateway
  policyTypes:
  - Ingress
  - Egress
  egress:
  - {}
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          cf-for-k8s.cloudfoundry.org/cf-system-ns: ""
#! TODO: Do we need this for cf-workloads for cf pushed apps???
---
#! Source: prometheus-pushgateway/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-pushgateway
  labels:
    app: prometheus-pushgateway
  namespace: #@ data.values.system_namespace
---
#! Source: prometheus-pushgateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-pushgateway
  annotations:
    {}
  labels:
    app: prometheus-pushgateway
  namespace: #@ data.values.system_namespace
spec:
  type: ClusterIP
  ports:
    - port: 9091
      targetPort: 9091
      protocol: TCP
      name: http
  selector:
    app: prometheus-pushgateway
---
#! Source: prometheus-pushgateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-pushgateway
  labels:
    app: prometheus-pushgateway
  namespace: #@ data.values.system_namespace
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prometheus-pushgateway
  template:
    metadata:
      labels:
        app: prometheus-pushgateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: prometheus-pushgateway
      containers:
        - name: pushgateway
          image: "oratos/prometheus-pushgateway:v2.20.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: metrics
              containerPort: 9091
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          resources:
            {}
